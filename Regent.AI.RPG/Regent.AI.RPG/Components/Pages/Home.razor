@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject Regent.AI.RPG.Services.GameMasterService GameMaster

<div class="main-container">

    <h1 style="text-align: center;">AI-Driven RPG Game</h1>

    <div style="margin-top: 20px;">
        <h2>Narrative</h2>
        <p>@NarratorText</p>
    </div>

    <div style="margin-top: 20px;">
        <h3>Your Character</h3>
        <img src="https://via.placeholder.com/100" alt="Character Avatar" style="border-radius: 50%;" />
        <p<input @bind="CharacterName" style="width: 100%; padding: 10px;" /></p>
    </div>

    <div style="margin-top: 20px;">
        <h3>Your Action</h3>
        <input @bind="UserAction" @onkeydown="HandleKeyPress" style="width: 100%; padding: 10px;" />
    </div>

</div>

@code {

    private HubConnection? hubConnection;
    private string NarratorText = "";
    private string CharacterName = "Your Character"; // Replace with actual character name
    private string UserAction = "";

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gameHub"))
            .Build();

        // Handle receiving updated narrative from the server
        hubConnection.On<string>("ReceiveNarrative", (narrative) =>
        {
            NarratorText = $"{NarratorText}{Environment.NewLine}{narrative}";
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        NarratorText = GameMaster.gameContext;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        Console.WriteLine($"HandleKeyPress fired!");

        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(UserAction))
            {
                await hubConnection!.SendAsync("SendAction", CharacterName, UserAction);

                UserAction = string.Empty;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}